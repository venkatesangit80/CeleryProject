import time
from functools import lru_cache
from datetime import datetime, timedelta

def timed_lru_cache(seconds: int, maxsize: int = 128):
    def wrapper_cache(func):
        func = lru_cache(maxsize=maxsize)(func)
        func.lifetime = timedelta(seconds=seconds)
        func.expiration = datetime.now() + func.lifetime

        def wrapped_func(*args, **kwargs):
            if datetime.now() >= func.expiration:
                func.cache_clear()  # Clear the cache
                func.expiration = datetime.now() + func.lifetime
            return func(*args, **kwargs)

        wrapped_func.cache_info = func.cache_info
        wrapped_func.cache_clear = func.cache_clear
        return wrapped_func

    return wrapper_cache

@timed_lru_cache(seconds=1800)  # Cache for 30 minutes (1800 seconds)
def get_data_from_source():
    print("Fetching data from source...")
    return {"data": "sample data"}

# Usage example
print(get_data_from_source())  # Fetches from source
time.sleep(5)
print(get_data_from_source())  # Returns cached result
time.sleep(1800)
print(get_data_from_source())  # Cache expired, fetches from source again