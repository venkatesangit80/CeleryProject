import pandas as pd
import numpy as np

# Sample DataFrame
data = {
    'A': [np.nan, 2, np.nan, 4],
    'B': [1, np.nan, 3, np.nan],
    'C': [np.nan, np.nan, np.nan, 5]
}
df = pd.DataFrame(data)

# Select the first non-null value from A, B, or C
df['ColumnA'] = df[['A', 'B', 'C']].bfill(axis=1).iloc[:, 0]

print(df)



import pandas as pd

# Sample DataFrame
data = {
    'app': ['app1', 'app1', 'app1', 'app2', 'app2', 'app2', 'app3', 'app3', 'app3'],
    'env': ['dev', 'test', 'prod', 'dev', 'test', 'prod', 'dev', 'test', 'prod'],
    'host': [10, 15, 20, 5, 10, 15, 12, 18, 24],
    'TAS': [5, 7, 9, 2, 4, 6, 6, 8, 10],
    'network': [3, 4, 5, 1, 2, 3, 2, 3, 4],
    'DB': [8, 10, 12, 4, 5, 6, 7, 9, 11]
}

df = pd.DataFrame(data)

# Group by 'app' and sum values for all resources
all_env = df.groupby('app').sum(numeric_only=True).reset_index()
all_env['env'] = 'all'  # Add 'all' as the environment

# Concatenate the original DataFrame with the aggregated 'all' environment
result = pd.concat([df, all_env], ignore_index=True)

# Reorder the DataFrame
result = result[['app', 'env', 'host', 'TAS', 'network', 'DB']]

# Sort the DataFrame for better readability
result = result.sort_values(by=['app', 'env']).reset_index(drop=True)

print(result)

SELECT 
    SUBSTR(column_name, 1, INSTR(column_name, '-', -1) - 1) AS extracted_value
FROM 
    table_name
WHERE 
    INSTR(column_name, '-') > 0;





MERGE INTO target_table t
USING source_table s
ON (t.id = s.id)
WHEN MATCHED THEN
    UPDATE SET 
        t.value = s.value,        -- Update existing data
        t.is_active = 'Y',        -- Ensure record is active
        t.deleted_at = NULL       -- Clear soft delete if reactivated
WHEN NOT MATCHED THEN
    INSERT (id, value, is_active, deleted_at)
    VALUES (s.id, s.value, 'Y', NULL)
WHEN NOT MATCHED BY SOURCE THEN
    UPDATE SET 
        t.is_active = 'N',        -- Mark as soft deleted
        t.deleted_at = SYSDATE    -- Record the soft delete timestamp
    WHERE t.is_active = 'Y';      -- Only soft delete active records



DELETE FROM target_table
WHERE is_active = 'N'
  AND deleted_at <= SYSDATE - 5; -- Deletes records older than 5 days



import pandas as pd
import numpy as np

# Sample DataFrame
data = {
    'environment': ['Prod', 'DR', 'Test', 'Prod'],
    'host_count': [10, 0, 5, 0],
    'tas_count': [0, 0, 0, 5],
    'tkgi_count': [0, 0, 0, 0],
    'cloud_service_type': ['NO SERVICE', 'NO SERVICE', 'NO SERVICE', 'NO SERVICE']
}
df = pd.DataFrame(data)

# Define the conditions
conditions = [
    (df['environment'].isin(['Prod', 'DR'])) & (df['cloud_service_type'] == 'NO SERVICE') & (df['host_count'] > 0) & (df['tas_count'] == 0) & (df['tkgi_count'] == 0),
    (df['environment'].isin(['Prod', 'DR'])) & (df['cloud_service_type'] == 'NO SERVICE') & (df['host_count'] == 0) & ((df['tas_count'] > 0) | (df['tkgi_count'] > 0)),
    (df['environment'].isin(['Prod', 'DR'])) & (df['cloud_service_type'] == 'NO SERVICE') & (df['host_count'] > 0) & ((df['tas_count'] > 0) | (df['tkgi_count'] > 0))
]

# Define the corresponding outputs
outputs = ['VM/PM', 'PAAS', 'HYBRID']

# Apply the conditions and assign the new values
df['cloud_service_type'] = np.select(conditions, outputs, default=df['cloud_service_type'])

print(df)


MERGE INTO platform p
USING platform_staging ps
ON (p.unique_id = ps.unique_id)
WHEN MATCHED THEN
    UPDATE SET
        p.lob = ps.lob,
        p.appid = ps.appid,
        p.environment = ps.environment,
        p.platform_data = ps.platform_data,
        p.is_active = 'Y',
        p.deleted_at = NULL
WHEN NOT MATCHED THEN
    INSERT (unique_id, lob, appid, environment, platform_data, is_active, deleted_at)
    VALUES (ps.unique_id, ps.lob, ps.appid, ps.environment, ps.platform_data, 'Y', NULL)
WHEN NOT MATCHED BY SOURCE THEN
    UPDATE SET
        p.is_active = 'N',
        p.deleted_at = SYSTIMESTAMP;