import redis
from filelock import FileLock

# Redis connection setup
redis_client = redis.Redis(host='localhost', port=6379, db=0)

def fetch_and_write_metrics(redis_client, search_pattern, output_file, lock_file, chunk_size=100):
    """
    Fetch metrics data from Redis using pipelining and write them to a locked file.
    
    :param redis_client: Redis client instance
    :param search_pattern: The search pattern for Redis keys (e.g., "metrics:*")
    :param output_file: The file path to write the fetched data
    :param lock_file: The lock file to ensure no other process can access the file while writing
    :param chunk_size: The number of keys to fetch at once in a Redis pipeline
    """
    # Use Redis SCAN to fetch keys that match the search pattern
    cursor, keys = redis_client.scan(match=search_pattern, count=chunk_size)
    
    # Lock the file to ensure other processes can't read it while we write
    lock = FileLock(lock_file)

    with lock:  # Lock the file during this block
        # Open the output file for writing
        with open(output_file, 'w') as file:
            while keys:
                # Fetch data from Redis using pipelining
                pipeline = redis_client.pipeline()
                for key in keys:
                    pipeline.get(key)
                
                # Execute the pipeline to get all the results in batch
                results = pipeline.execute()

                # Write each key's data to the file
                for key, value in zip(keys, results):
                    if value:  # Ensure value is not None
                        file.write(f"Key: {key.decode('utf-8')}\n")
                        file.write(f"{value.decode('utf-8')}\n")
                        file.write("\n")  # Add newline for readability
                
                # Fetch the next batch of keys
                cursor, keys = redis_client.scan(cursor=cursor, match=search_pattern, count=chunk_size)

    print(f"Finished writing metrics to {output_file}")

# Example usage
fetch_and_write_metrics(redis_client, "metrics:*", "/path/to/output_file.txt", "/path/to/output_file.lock", chunk_size=100)