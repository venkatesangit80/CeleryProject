import unittest
from unittest.mock import patch, MagicMock
from app_module import app

class TestFlaskApp(unittest.TestCase):

    @patch('app_module.request')
    def test_greet(self, mock_request):
        mock_request.args = {'name': 'John'}
        with app.test_client() as client:
            response = client.get('/greet')
            json_data = response.get_json()
            self.assertEqual(response.status_code, 200)
            self.assertEqual(json_data['message'], 'Hello, John!')

    @patch('app_module.render_template')
    def test_home(self, mock_render_template):
        mock_render_template.return_value = 'mocked_template'
        with app.test_client() as client:
            response = client.get('/home')
            mock_render_template.assert_called_once_with('home.html', title='Home')
            self.assertEqual(response.data.decode(), 'mocked_template')

    @patch('app_module.session')
    def test_get_session(self, mock_session):
        mock_session.get.return_value = 'mocked_data'
        with app.test_client() as client:
            response = client.get('/get-session')
            json_data = response.get_json()
            self.assertEqual(json_data['session_data'], 'mocked_data')

    @patch('app_module.url_for')
    def test_redirect_home(self, mock_url_for):
        mock_url_for.return_value = '/mocked_home'
        with app.test_client() as client:
            response = client.get('/redirect-home')
            mock_url_for.assert_called_once_with('home')
            self.assertEqual(response.status_code, 302)
            self.assertEqual(response.location, 'http://localhost/mocked_home')

if __name__ == '__main__':
    unittest.main()